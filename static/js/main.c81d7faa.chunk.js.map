{"version":3,"sources":["serviceWorker.js","components/Display.js","components/ClearButton.js","components/OperationButton.js","components/NumberButton.js","layout/Calculator.js","layout/Header.js","index.js"],"names":["Boolean","window","location","hostname","match","Display","text","className","ClearButton","onClear","type","onClick","OperationButton","label","canAddOperation","value","disabled","NumberButton","operations","PLUS","MINUS","DIVIDE","MULTIPLY","EQUAL","Calculator","props","initialState","result","display","handleClear","setState","state","Object","values","indexOf","substr","handleOperation","event","op","target","addToDisplay","operation","replace","safeEval","toString","handleNumber","nb","handleKeyboardEvent","key","e","stopPropagation","supportedKeyboardEvents","numbers","bindKeyToOperation","specials","elem","this","operationBtnActions","numberBtnActions","keys","flat","handleKeys","onKeyEvent","React","Component","Header","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c81d7faa.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Display.css';\n\nconst Display = ({ text }) => {\n  return (\n    <div className=\"display\">\n      <span>{ text }</span>\n    </div>\n  )\n}\n\nDisplay.propTypes = {\n  text: PropTypes.string.isRequired,\n}\n\nexport default Display;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Buttons.css';\nimport './ClearButton.css';\n\nconst ClearButton = ({ onClear }) => (\n  <button\n    className=\"button clear-button\"\n    type=\"button\"\n    onClick={onClear}\n  >\n    clear\n  </button>\n\n);\n\nClearButton.propTypes = {\n  onClear: PropTypes.func.isRequired,\n};\n\nexport default ClearButton;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Buttons.css';\nimport './OperationButton.css';\n\nconst OperationButton = ({ label, canAddOperation, onClick }) => {\n  return (\n    <button\n      className=\"button operation-button\"\n      type=\"button\"\n      onClick={onClick}\n      value={label}\n      disabled={!canAddOperation}\n    >\n      {label}\n    </button>\n  );\n};\n\nOperationButton.propTypes = {\n  label: PropTypes.string.isRequired,\n  canAddOperation: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n}\n\nexport default OperationButton;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Buttons.css';\nimport './NumberButton.css';\n\nconst NumberButton = ({ value, onClick }) => {\n  return (\n    <button\n      className=\"button number-button\"\n      type=\"button\"\n      value={value}\n      onClick={onClick}\n    >\n      { value }\n    </button>\n  )\n}\n\nNumberButton.propTypes = {\n  value: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n}\n\nexport default NumberButton;","import React from 'react';\nimport safeEval from 'safe-eval';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\n\nimport Display from '../components/Display';\nimport ClearButton from '../components/ClearButton';\nimport OperationButton from '../components/OperationButton';\nimport NumberButton from '../components/NumberButton';\n\nimport './Calculator.css';\n\n// Operations handled by the calculator\nconst operations = {\n  PLUS: \"+\",\n  MINUS: \"−\",\n  DIVIDE: \"÷\",\n  MULTIPLY: \"×\",\n  EQUAL: \"=\",\n}\n\nexport default class Calculator extends React.Component {\n  // Constructor\n  constructor(props) {\n    super(props);\n    this.state = this.initialState();\n    this.supportedKeyboardEvents = {\n      numbers: ['0','1','2','3','4','5','6','7','8','9'],\n      operations: ['+','-','/','*','='],\n      specials: ['del', 'enter'],\n    }\n  }\n\n  // Initial state\n  initialState = () => ({\n    result: true,\n    display: \"0\",\n  })\n\n  // Callback for a click on clear button\n  handleClear = () => {\n    this.setState(this.initialState());\n  }\n\n  // Add an element (value / operation) to the display\n  addToDisplay(elem) {\n    this.setState(state => ({\n      display: (state.result && state.display === \"0\") ? elem : state.display+elem,\n      result: false,\n    }));\n  }\n\n  // Returns true if an operation can be added to the display, false otherwise\n  canAddOperation = () => (\n    !(this.state.result && this.state.display === \"0\") &&\n    Object.values(operations).indexOf(this.state.display.substr(-1)) === -1\n  )\n\n  // Callback for a click on an operation button (+, -, *, /, =)\n  handleOperation = (event, op) => {\n    const value = event ? event.target.value : op;\n    if (!this.canAddOperation()) return;\n\n    // New operation to add to display\n    if (value !== operations.EQUAL) {\n      this.addToDisplay(value);\n    } else {\n      // Requested the operation result\n      const display = this.state.display;\n      const operation = display\n        .replace(operations.PLUS, '+')\n        .replace(operations.MINUS, '-')\n        .replace(operations.MULTIPLY, '*')\n        .replace(operations.DIVIDE, '/')\n        .replace(operations.EQUAL, '=');\n      const result = safeEval(operation); //eslint-disable-line no-eval\n      this.setState({\n        display: result.toString(),\n        result: true,\n      })\n    }\n  }\n\n  // Callback for a click on a number button\n  handleNumber = (event, nb) => {\n    const value = event ? event.target.value : nb;\n    this.addToDisplay(value);\n  }\n\n  // Callback for a keyboard event\n  handleKeyboardEvent = (key, e) => {\n    e.stopPropagation();\n    // If the user typed in a number\n    if (this.supportedKeyboardEvents.numbers.indexOf(key) !== -1) {\n      // Add it to the display\n      this.handleNumber(null, key);\n    } else if (this.supportedKeyboardEvents.operations.indexOf(key) !== -1) {\n      // If the user typed in an operation (*, +, -, ...)\n      this.bindKeyToOperation(key);\n    } else if (this.supportedKeyboardEvents.specials.indexOf(key) !== -1) {\n      // If the user typed in a special key (delete, enter)\n      switch (key) {\n        case 'del':\n          this.handleClear();\n          break;\n        case 'enter':\n          this.handleOperation(null, operations.EQUAL);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  // Associate a key to an operation\n  bindKeyToOperation(key) {\n    switch (key) {\n      case '-':\n        this.handleOperation(null, operations.MINUS);\n        break;\n      case '+':\n        this.handleOperation(null, operations.PLUS);\n        break;\n      case '*':\n        this.handleOperation(null, operations.MULTIPLY);\n        break;\n      case '/':\n        this.handleOperation(null, operations.DIVIDE);\n        break;\n      case '=':\n        this.handleOperation(null, operations.EQUAL);\n        break;\n      default:\n        break;\n    }\n  }\n\n  // Render the component\n  render() {\n    const operationBtnActions = {\n      onClick: this.handleOperation,\n    };\n    const numberBtnActions = {\n      onClick: this.handleNumber,\n    }\n    const canAddOperation = this.canAddOperation();\n    const keys = Object.values(this.supportedKeyboardEvents).flat();\n\n    return (\n      <div className=\"calculator\">\n        <KeyboardEventHandler\n          handleKeys={keys}\n          onKeyEvent={this.handleKeyboardEvent}\n        />\n\n        <Display text={this.state.display} />\n\n        <NumberButton value={7} {...numberBtnActions} />\n        <NumberButton value={8} {...numberBtnActions} />\n        <NumberButton value={9} {...numberBtnActions} />\n        <OperationButton\n          label={operations.PLUS}\n          canAddOperation={canAddOperation}\n          {...operationBtnActions}\n        />\n\n        <NumberButton value={4} {...numberBtnActions} />\n        <NumberButton value={5} {...numberBtnActions} />\n        <NumberButton value={6} {...numberBtnActions} />\n        <OperationButton\n          label={operations.MINUS}\n          canAddOperation={canAddOperation}\n          {...operationBtnActions}\n        />\n\n        <NumberButton value={1} {...numberBtnActions} />\n        <NumberButton value={2} {...numberBtnActions} />\n        <NumberButton value={3} {...numberBtnActions} />\n        <OperationButton\n          label={operations.MULTIPLY}\n          canAddOperation={canAddOperation}\n          {...operationBtnActions}\n        />\n\n        <NumberButton value={0} {...numberBtnActions} />\n        <ClearButton onClear={this.handleClear} />\n        <OperationButton\n          label={operations.DIVIDE}\n          canAddOperation={canAddOperation}\n          {...operationBtnActions}\n        />\n        <OperationButton\n          label={operations.EQUAL}\n          canAddOperation={canAddOperation}\n          {...operationBtnActions}\n        />\n\n      </div>\n    )\n  }\n}","import React from 'react';\nimport './Header.css';\n\nexport default function Header() {\n  return (\n    <div className=\"header\">\n      <h1>React Calculator</h1>\n      <p>Use the buttons on the calculator to do your maths. Or you can use your keyboard as well.<br/>\n        Just make sure you click outside the calculator before ! </p>\n    </div>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Calculator from './layout/Calculator';\nimport Header from './layout/Header';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header/>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}